{"version":3,"sources":["utils/validators.ts","components/common/formsContols/FormControls.tsx","components/common/formsContols/FormControls.module.css","hoc/WithAuthRedirect.tsx","components/MainWrapper/DialogsWrapper/CurrentDialog/CurrentDialog.module.css","components/MainWrapper/DialogsWrapper/CurrentDialog/SendMessageAreaFromCurrentDialog/SendMessageAreaFromCurrentDialog.module.css","components/MainWrapper/DialogsWrapper/CurrentDialog/MessageFromCurrentDialog/MessageFromCurrentDialog.module.css","components/MainWrapper/DialogsWrapper/CurrentDialog/MessageFromCurrentDialog/MyMessage/MyMessage.module.css","components/MainWrapper/DialogsWrapper/CurrentDialog/MessageFromCurrentDialog/NotMyMessage/NotMyMessage.module.css","components/MainWrapper/DialogsWrapper/FriendListFromDialogs/FriendListFromDialogs.module.css","components/MainWrapper/DialogsWrapper/DialogsWrapper.module.css","components/MainWrapper/DialogsWrapper/CurrentDialog/SendMessageAreaFromCurrentDialog/SendMessageAreaFromCurrentDialog.tsx","components/MainWrapper/DialogsWrapper/CurrentDialog/MessageFromCurrentDialog/MyMessage/MyMessage.tsx","components/MainWrapper/DialogsWrapper/CurrentDialog/MessageFromCurrentDialog/NotMyMessage/NotMyMessage.tsx","components/MainWrapper/DialogsWrapper/CurrentDialog/MessageFromCurrentDialog/MessageFromCurrentDialog.tsx","components/MainWrapper/DialogsWrapper/CurrentDialog/CurrentDialog.tsx","components/MainWrapper/DialogsWrapper/FriendListFromDialogs/FriendListFromDialogs.tsx","components/MainWrapper/DialogsWrapper/DialogsWrapper.tsx","../node_modules/reselect/es/index.js","selectors/dialogs-selectors.ts","components/MainWrapper/DialogsWrapper/DialogsWrapper.container.tsx"],"names":["requiredField","value","trim","undefined","maxInputLength","length","FormControl","React","memo","props","hasError","meta","touched","error","className","style","textArea","children","Textarea","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","span","module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","to","AddNewMessageForm","onSubmit","handleSubmit","type","button","AddNewMessageFromRedux","reduxForm","form","SendMessageAreaFromCurrentDialog","sendMessageAreaFromCurrentDialog","formData","message","newMessageBody","onAddPost","MyMessage","s","avatar","avatarChild","src","avatarURL","messageFrame","textFrame","textMessage","item","time","cornet","id","NotMyMessage","MessageFromCurrentDialog","messagesBlock","messages","map","m","self","currentDialog","CurrentDialog","currentDialogWrapper","onPostChanger","FriendListFromDialogs","activeItem","active","friendListFromDialogs","DialogsWrapper","dialogsWrapper","addDialogsMessage","changeDialogsInput","defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","next","i","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","join","Error","createSelector","memoize","_len","arguments","memoizeOptions","_key","_len2","_key2","recomputations","resultFunc","pop","memoizedResultFunc","apply","concat","selector","params","push","resetRecomputations","createSelectorCreator","func","lastArgs","lastResult","difficultGetMessagestSelector","dialogsReducer","filter","getIsAuth","getFullName","profileReducer","profile","fullName","compose","actionsDialogs"],"mappings":"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","file":"static/js/5.11b613d4.chunk.js","sourcesContent":["export const requiredField= (value:string):string|undefined => {\r\n    if (value) {\r\n        return value.trim() ? undefined : 'error';\r\n    } else return 'error'\r\n}\r\nexport const maxInputLength=(length:number)=> (value:string):string|undefined => {\r\n    if (value.length > length) return  `max length is ${length} symbols`;\r\n        return undefined;\r\n}","import {Field, WrappedFieldProps} from \"redux-form\";\r\nimport React from \"react\";\r\nimport style from './FormControls.module.css'\r\n\r\n\r\nconst FormControl: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const hasError = props.meta.touched && props.meta.error;\r\n    return (\r\n        <div>\r\n            <div className={ `${ style.textArea } ${ hasError && style.error }` }>\r\n                { props.children }\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl  { ...props }>\r\n            <textarea { ...input } { ...restProps }/>\r\n        </FormControl>\r\n    )\r\n})\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl  { ...props }>\r\n            <input { ...input } { ...restProps }/>\r\n        </FormControl>\r\n    )\r\n})\r\n\r\nexport function createField<FormsKeysType extends string>(placeholder: string | undefined,\r\n                                           name: FormsKeysType,\r\n                                           validators: Array<Function>,\r\n                                           component: React.FC<WrappedFieldProps>,\r\n                                           props = {}, text = '') {\r\n    return (\r\n        <div>\r\n            <Field placeholder={ placeholder }\r\n                   name={ name }\r\n                   validate={ validators }\r\n                   component={ component }\r\n                   { ...props } />\r\n            <span className={ style.span }>{ text }</span>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textArea\":\"FormControls_textArea__2E7vZ\",\"error\":\"FormControls_error__2aMmc\",\"blinker\":\"FormControls_blinker__3zqOB\",\"span\":\"FormControls_span__2xR_G\"};","import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/reduxStore\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {isAuth: state.auth.isAuth}\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        return !isAuth\r\n            ? <Redirect to={ '/login' }/>\r\n            : <Component { ...restProps as T } />\r\n    }\r\n\r\n    return connect ( mapStateToProps ) ( RedirectComponent )\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentDialogWrapper\":\"CurrentDialog_currentDialogWrapper__7jmqe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sendMessageAreaFromCurrentDialog\":\"SendMessageAreaFromCurrentDialog_sendMessageAreaFromCurrentDialog__1VSJE\",\"textArea\":\"SendMessageAreaFromCurrentDialog_textArea__3YiTY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentDialog\":\"MessageFromCurrentDialog_currentDialog__ocHBh\",\"myMessage\":\"MessageFromCurrentDialog_myMessage__WoHUJ\",\"myAvatar\":\"MessageFromCurrentDialog_myAvatar__3V_VQ\",\"notMyMessage\":\"MessageFromCurrentDialog_notMyMessage__2ZhZd\",\"notMyAvatar\":\"MessageFromCurrentDialog_notMyAvatar__2rO57\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MyMessage_message__yjYr3\",\"avatar\":\"MyMessage_avatar__2sc-P\",\"messageFrame\":\"MyMessage_messageFrame__2wg_A\",\"cornet\":\"MyMessage_cornet__3Oapb\",\"textMessage\":\"MyMessage_textMessage__3ta3E\",\"textFrame\":\"MyMessage_textFrame__wc00I\",\"name\":\"MyMessage_name__2ddn2\",\"time\":\"MyMessage_time__4iLZ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"NotMyMessage_message__2zzNu\",\"avatar\":\"NotMyMessage_avatar__DJ68z\",\"messageFrame\":\"NotMyMessage_messageFrame__2WzYR\",\"cornet\":\"NotMyMessage_cornet__SFrBS\",\"textMessage\":\"NotMyMessage_textMessage__38-1V\",\"textFrame\":\"NotMyMessage_textFrame__1iqxP\",\"name\":\"NotMyMessage_name__2_Brb\",\"time\":\"NotMyMessage_time__3WrmT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendListFromDialogs\":\"FriendListFromDialogs_friendListFromDialogs__3oEb4\",\"item\":\"FriendListFromDialogs_item__1b4o6\",\"active\":\"FriendListFromDialogs_active__2mZZu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"DialogsWrapper_dialogsWrapper__7JBh7\"};","import React from \"react\";\r\nimport style from './SendMessageAreaFromCurrentDialog.module.css'\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from \"../../../../common/formsContols/FormControls\";\r\nimport {requiredField} from \"../../../../../utils/validators\";\r\n\r\n\r\n\r\ntype SendMessageAreaFromCurrentDialogPropsType = {\r\n    onAddPost: (self: boolean,item:string) => void\r\n    onPostChanger: (item: string) => void\r\n\r\n}\r\ntype PropsType = {\r\n}\r\nexport type AddMessageFormType = {\r\n    newMessageBody: string\r\n    validate:any[]\r\n}\r\n\r\n\r\n\r\nconst AddNewMessageForm:React.FC<InjectedFormProps<AddMessageFormType>> & PropsType = React.memo((props)=>{\r\n    return (\r\n        <form onSubmit={ props.handleSubmit }>\r\n            {createField('enter new message here','newMessageBody',[requiredField],Textarea,{type:'text'})}\r\n            <div className={style.button}>\r\n                <button>send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n})\r\nconst AddNewMessageFromRedux = reduxForm<AddMessageFormType> ( {form: 'profile add message form'} ) (AddNewMessageForm)\r\n\r\nexport const SendMessageAreaFromCurrentDialog:React.FC<SendMessageAreaFromCurrentDialogPropsType> = React.memo((props) =>{\r\n\r\n    const onSubmit = (formData:AddMessageFormType)=>{\r\n        const message = formData.newMessageBody;\r\n        if (message) {\r\n        message.trim()&& props.onAddPost (true,message.trim())\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={ style.sendMessageAreaFromCurrentDialog }>\r\n            <AddNewMessageFromRedux onSubmit={onSubmit}/>\r\n\r\n        </div>\r\n    )\r\n});","import s from \"./MyMessage.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MyMessagePropsType ={\r\n    id: number\r\n    item: string\r\n    self: boolean\r\n    avatarURL: string\r\n    name:string |null\r\n}\r\n\r\nexport const MyMessage = React.memo((props: MyMessagePropsType) => (\r\n    <div className={ s.message } key={ props.id }>\r\n        <div className={ s.avatar }><img className={ s.avatarChild } src={ props.avatarURL }/></div>\r\n        <div className={ s.messageFrame }>\r\n            <div className={ s.textFrame }>\r\n                <div className={ s.name }>{ props.name || 'unknown' }</div>\r\n                <div className={ s.textMessage }>{ props.item }</div>\r\n                <div className={ s.time }>02.21.22</div>\r\n            </div>\r\n            <div className={ s.cornet }></div>\r\n        </div>\r\n    </div>\r\n));","import s from \"./NotMyMessage.module.css\";\r\nimport React from \"react\";\r\n\r\ntype NotMyMessagePropsType = {\r\n    id: number\r\n    item: string\r\n    self: boolean\r\n    avatarURL: string\r\n    name: string | null\r\n}\r\n\r\nexport const NotMyMessage = React.memo((props: NotMyMessagePropsType) => (\r\n    <div className={ s.message }>\r\n        <div className={ s.avatar }><img className={ s.avatarChild } src={ props.avatarURL }/></div>\r\n        <div className={ s.messageFrame }>\r\n            <div className={ s.cornet }></div>\r\n            <div className={ s.textFrame }>\r\n                <div className={ s.name }>{ props.name || 'unknown' }</div>\r\n                <div className={ s.textMessage }>{ props.item }</div>\r\n                <div className={ s.time }>02.21.22</div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n));","import React from \"react\";\r\nimport s from './MessageFromCurrentDialog.module.css'\r\nimport {MyMessage} from \"./MyMessage/MyMessage\";\r\nimport {NotMyMessage} from \"./NotMyMessage/NotMyMessage\";\r\nimport {MessagesFromDialogsType} from \"../../../../../Redux/dialogsReducer\";\r\n\r\n\r\nexport type MessageFromCurrentDialogPropsType = {\r\n    messages: Array<MessagesFromDialogsType>\r\n    name:string|null\r\n}\r\n\r\nexport const MessageFromCurrentDialog = React.memo((props: MessageFromCurrentDialogPropsType) => {\r\n\r\n    let messagesBlock = props.messages.map(m => {\r\n        return (\r\n            !m.self //определяем чей месадж\r\n                ? <NotMyMessage name={props.name} self={m.self} avatarURL={m.avatarURL} id={m.id} item={m.item} key={m.id}/>\r\n                : <MyMessage name={props.name} self={m.self} avatarURL={m.avatarURL} id={m.id} item={m.item} key={m.id}/>)\r\n    })\r\n\r\n    return (\r\n        <div className={s.currentDialog}>\r\n            {messagesBlock}\r\n        </div>\r\n\r\n\r\n    )\r\n});","import React from \"react\";\r\nimport s from './CurrentDialog.module.css'\r\nimport {SendMessageAreaFromCurrentDialog} from \"./SendMessageAreaFromCurrentDialog/SendMessageAreaFromCurrentDialog\";\r\nimport {MessageFromCurrentDialog} from \"./MessageFromCurrentDialog/MessageFromCurrentDialog\";\r\nimport {MessagesFromDialogsType} from \"../../../../Redux/dialogsReducer\";\r\n\r\nexport type CurrentDialogPropsType = {\r\n    messages: Array<MessagesFromDialogsType>\r\n    onAddPost: (self: boolean,item:string) => void\r\n    onPostChanger: (item: string) => void\r\n    name:string|null\r\n}\r\n\r\nexport const CurrentDialog = React.memo((props: CurrentDialogPropsType) => (\r\n    <div className={ s.currentDialogWrapper }>\r\n        <MessageFromCurrentDialog name={ props.name } messages={ props.messages }/>\r\n        <SendMessageAreaFromCurrentDialog onAddPost={ props.onAddPost } onPostChanger={ props.onPostChanger }/>\r\n    </div>\r\n));\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from './FriendListFromDialogs.module.css'\r\n\r\nexport const FriendListFromDialogs = React.memo(() => {\r\nconst activeItem = s.item + ' ' +s.active\r\n    return (\r\n        <div className={s.friendListFromDialogs}>\r\n            <NavLink to='/dialog/1' className={activeItem}>Dmitriy Vitcli-Putcli</NavLink>\r\n            <NavLink to='/dialog/2' className={s.item}>Ivan Vitcli-Putcli</NavLink>\r\n            <NavLink to='/dialog/3' className={s.item}>Fekla Vitcli-Putcli</NavLink>\r\n            <NavLink to='/dialog/4' className={s.item}>Antoniy Vitcli-Putcli</NavLink>\r\n            <NavLink to='/dialog/5' className={s.item}>Vasiliy Vitcli</NavLink>\r\n            <NavLink to='/dialog/6' className={s.item}>etc.</NavLink>\r\n        </div>\r\n    )\r\n});","import React from \"react\";\r\nimport {CurrentDialog} from \"./CurrentDialog/CurrentDialog\";\r\nimport {FriendListFromDialogs} from \"./FriendListFromDialogs/FriendListFromDialogs\";\r\nimport s from './DialogsWrapper.module.css';\r\nimport {MessagesFromDialogsType} from \"../../../Redux/dialogsReducer\";\r\n\r\nexport type DialogsWrapperPropsType = {\r\n    addDialogsMessage: (self: boolean,item:string) => void\r\n    changeDialogsInput: (item: string) => void\r\n    messages: Array<MessagesFromDialogsType>\r\n    isAuth: boolean\r\n    name: string | null\r\n}\r\n\r\nexport const DialogsWrapper: React.FC<DialogsWrapperPropsType> = React.memo((props) => {\r\n    return <div className={ s.dialogsWrapper }>\r\n            <FriendListFromDialogs/>\r\n            <CurrentDialog name={ props.name } onAddPost={ props.addDialogsMessage } onPostChanger={ props.changeDialogsInput }\r\n                           messages={ props.messages }/>\r\n        </div>\r\n\r\n});\r\n","function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.dependencies = dependencies;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nexport var createSelector = createSelectorCreator(defaultMemoize);\n\nexport function createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","import {AppStateType} from \"../Redux/reduxStore\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nexport const getMessages = (state:AppStateType)=>{\r\n    return state.dialogsReducer.messages\r\n}\r\nexport const difficultGetMessagestSelector = createSelector(getMessages,(messages)=>{\r\n    return messages.filter(m=>m) //filter can be here\r\n})\r\nexport const getIsAuth = (state:AppStateType)=>{\r\n    return state.auth.isAuth\r\n}\r\nexport const getFullName = (state:AppStateType)=>{\r\n    return state.profileReducer.profile.fullName\r\n}\r\n","import React from 'react';\r\nimport {DialogsWrapper} from \"./DialogsWrapper\";\r\nimport {actionsDialogs, InitialStateDialogsType} from \"../../../Redux/dialogsReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {AppStateType} from \"../../../Redux/reduxStore\";\r\nimport {withAuthRedirect} from \"../../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {difficultGetMessagestSelector, getFullName, getIsAuth, getMessages} from \"../../../selectors/dialogs-selectors\";\r\n\r\n\r\ntype MapStateToPropsType ={\r\n    isAuth:boolean\r\n    name:string|null\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType & InitialStateDialogsType => {\r\n    return {\r\n        messages: difficultGetMessagestSelector(state),//filter self===true in user-selectors/ test reselect\r\n        isAuth:getIsAuth(state),\r\n        name:getFullName(state)\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {addDialogsMessage:actionsDialogs.addDialogsMessage}), withAuthRedirect)(DialogsWrapper)\r\n"],"sourceRoot":""}