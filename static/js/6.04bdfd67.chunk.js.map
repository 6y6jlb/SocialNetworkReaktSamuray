{"version":3,"sources":["utils/validators.ts","components/common/formsContols/FormControls.tsx","components/common/formsContols/FormControls.module.css","components/common/login/Login.module.css","components/common/login/loginForm/LoginForm.module.css","components/common/login/loginForm/LoginForm.tsx","components/common/login/Login.tsx","components/common/login/LoginContainer.tsx"],"names":["requiredField","value","trim","undefined","maxInputLength","length","FormControl","React","memo","props","hasError","meta","touched","error","className","style","textArea","children","Textarea","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","span","module","exports","isMaxLengthMore20","LoginForm","loginForm","onSubmit","handleSubmit","type","button","reduxForm","form","Login","isAuth","loginTC","exact","to","loginWrapper","loginH1","data","login","password","checkbox","compose","connect","state","auth"],"mappings":"wHAAA,oEAAO,IAAMA,EAAe,SAACC,GACzB,OAAIA,GACOA,EAAMC,YAASC,EACZ,SAELC,EAAe,SAACC,GAAD,OAAkB,SAACJ,GAC3C,GAAIA,EAAMI,OAASA,EAAQ,MAAM,iBAAN,OAAyBA,EAAzB,e,6MCDzBC,EAA2CC,IAAMC,MAAK,SAACC,GACzD,IAAMC,EAAWD,EAAME,KAAKC,SAAWH,EAAME,KAAKE,MAClD,OACI,8BACI,qBAAKC,UAAS,UAAOC,IAAMC,SAAb,YAA2BN,GAAYK,IAAMF,OAA3D,SACMJ,EAAMQ,gBAMXC,EAAwCX,IAAMC,MAAK,SAACC,GAAW,IACjEU,EAAuCV,EAAvCU,MAA0BC,GAAaX,EAAhCE,KAAgCF,EAA1BQ,SADmD,YACzBR,EADyB,8BAEvE,OACI,cAACH,EAAD,2BAAmBG,GAAnB,aACI,oDAAeU,GAAaC,UAK3BC,EAAqCd,IAAMC,MAAK,SAACC,GAAW,IAC9DU,EAAuCV,EAAvCU,MAA0BC,GAAaX,EAAhCE,KAAgCF,EAA1BQ,SADgD,YACtBR,EADsB,8BAEpE,OACI,cAACH,EAAD,2BAAmBG,GAAnB,aACI,iDAAYU,GAAaC,UAK9B,SAASE,EAA0CC,EACfC,EACAC,EACAC,GACwB,IAAxBjB,EAAuB,uDAAf,GAAIkB,EAAW,uDAAJ,GAC1D,OACI,gCACI,cAAC,IAAD,aAAOJ,YAAcA,EACdC,KAAOA,EACPI,SAAWH,EACXC,UAAYA,GACPjB,IACZ,sBAAMK,UAAYC,IAAMc,KAAxB,SAAiCF,S,oBC7C7CG,EAAOC,QAAU,CAAC,SAAW,+BAA+B,MAAQ,4BAA4B,QAAU,8BAA8B,KAAO,6B,oBCA/ID,EAAOC,QAAU,CAAC,aAAe,4BAA4B,QAAU,yB,oBCAvED,EAAOC,QAAU,CAAC,UAAY,6BAA6B,OAAS,0BAA0B,MAAQ,2B,kICgBhGC,EAAoB5B,YAAe,IAEnC6B,EAA8D1B,IAAMC,MAAK,SAACC,GAC5E,OAAO,uBAAMK,UAAS,UAAMC,IAAMmB,UAAZ,YAAyBzB,EAAMI,OAASE,IAAMF,OAASsB,SAAU1B,EAAM2B,aAAtF,UACFd,YAAgC,QAAQ,QAAQ,CAACtB,IAAcgC,GAAmBX,KAClFC,YAAgC,WAAW,WAAW,CAACtB,IAAcgC,GAAmBX,IAAO,CAACgB,KAAK,aACrGf,iBAAgCnB,EAAU,WAAW,GAAGkB,IAAO,CAACgB,KAAK,YAAY,cAClF,qBAAKvB,UAAWC,IAAMuB,OAAtB,SACI,oDAIGC,cAAoB,CAACC,KAAK,SAA1BD,CAAqCN,G,OCJrCQ,EAdyB,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAM9C,OAAID,EAAe,cAAC,IAAD,CAAUE,OAAK,EAACC,GAAK,MAEjC,sBAAK/B,UAAYC,IAAM+B,aAAvB,UACH,oBAAIhC,UAAYC,IAAMgC,QAAtB,mBACA,cAAC,EAAD,CAAWZ,SATE,SAACa,GAAoB,IAC3BC,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,SAAUC,EAAYH,EAAZG,SACxBR,EAAUM,EAAOC,EAAUC,U,wBCGpBC,sBAA+BC,aANtB,SAACC,GACrB,MAAO,CACHZ,OAAOY,EAAMC,KAAKb,UAI+C,CAACC,cAA3DS,CAA0EX","file":"static/js/6.04bdfd67.chunk.js","sourcesContent":["export const requiredField= (value:string):string|undefined => {\r\n    if (value) {\r\n        return value.trim() ? undefined : 'error';\r\n    } else return 'error'\r\n}\r\nexport const maxInputLength=(length:number)=> (value:string):string|undefined => {\r\n    if (value.length > length) return  `max length is ${length} symbols`;\r\n        return undefined;\r\n}","import {Field, WrappedFieldProps} from \"redux-form\";\r\nimport React from \"react\";\r\nimport style from './FormControls.module.css'\r\n\r\n\r\nconst FormControl: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const hasError = props.meta.touched && props.meta.error;\r\n    return (\r\n        <div>\r\n            <div className={ `${ style.textArea } ${ hasError && style.error }` }>\r\n                { props.children }\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl  { ...props }>\r\n            <textarea { ...input } { ...restProps }/>\r\n        </FormControl>\r\n    )\r\n})\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl  { ...props }>\r\n            <input { ...input } { ...restProps }/>\r\n        </FormControl>\r\n    )\r\n})\r\n\r\nexport function createField<FormsKeysType extends string>(placeholder: string | undefined,\r\n                                           name: FormsKeysType,\r\n                                           validators: Array<Function>,\r\n                                           component: React.FC<WrappedFieldProps>,\r\n                                           props = {}, text = '') {\r\n    return (\r\n        <div>\r\n            <Field placeholder={ placeholder }\r\n                   name={ name }\r\n                   validate={ validators }\r\n                   component={ component }\r\n                   { ...props } />\r\n            <span className={ style.span }>{ text }</span>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textArea\":\"FormControls_textArea__2E7vZ\",\"error\":\"FormControls_error__2aMmc\",\"blinker\":\"FormControls_blinker__3zqOB\",\"span\":\"FormControls_span__2xR_G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWrapper\":\"Login_loginWrapper__B6YX1\",\"loginH1\":\"Login_loginH1__JnemM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"LoginForm_loginForm__1z6lU\",\"button\":\"LoginForm_button__26FgN\",\"error\":\"LoginForm_error__2E9h3\"};","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../../formsContols/FormControls\";\r\nimport {maxInputLength, requiredField} from \"../../../../utils/validators\";\r\nimport style from './LoginForm.module.css'\r\n\r\nexport type FormType = {\r\n    login:string\r\n    password:string\r\n    checkbox:boolean\r\n}\r\n//generic types for createField\r\nexport type CurrentFieldsTypes = Extract <keyof  FormType, string>\r\n\r\ntype PropsType = {}\r\n\r\n//function inside component\r\nconst isMaxLengthMore20 = maxInputLength(20)\r\n\r\nconst LoginForm:React.FC<InjectedFormProps<FormType>> & PropsType = React.memo((props)=> {\r\n    return <form className={ `${style.loginForm} ${props.error && style.error}`} onSubmit={props.handleSubmit}>\r\n        {createField<CurrentFieldsTypes>('login','login',[requiredField,isMaxLengthMore20],Input)}\r\n        {createField<CurrentFieldsTypes>('password','password',[requiredField,isMaxLengthMore20],Input, {type:'password'})}\r\n        {createField<CurrentFieldsTypes>(undefined,'checkbox',[],Input, {type:'checkbox'},'rememberMe')}\r\n        <div className={style.button}>\r\n            <button>submit</button>\r\n        </div>\r\n    </form>\r\n})\r\nexport default reduxForm<FormType>({form:'login'})( LoginForm);","import React from 'react';\r\nimport style from './Login.module.css';\r\nimport LoginForm, {FormType} from \"./loginForm/LoginForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype LoginPropsType = {\r\n    loginTC: (email: string, password: string, checkbox: boolean) => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = ({isAuth, loginTC}) => {\r\n    const onSubmit = (data: FormType) => {\r\n        const {login, password, checkbox} = data\r\n        loginTC ( login, password, checkbox )\r\n    }\r\n\r\n    if (isAuth) return <Redirect exact to={ '/' }/> //if isAuth true redirect to profile\r\n\r\n    return <div className={ style.loginWrapper }>\r\n        <h1 className={ style.loginH1 }>login</h1>\r\n        <LoginForm onSubmit={ onSubmit }/>\r\n    </div>\r\n};\r\n\r\nexport default Login;\r\n\r\n","import Login from \"./Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/reduxStore\";\r\nimport {loginTC} from \"../../../Redux/auth-reducer\";\r\nimport {compose} from \"redux\";\r\nimport React from \"react\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth:boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType> ( connect ( mapStateToProps, {loginTC} ) ) ( Login );"],"sourceRoot":""}